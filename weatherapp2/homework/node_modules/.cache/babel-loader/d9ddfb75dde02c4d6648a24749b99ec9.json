{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ttige\\\\Desktop\\\\weatherapp2\\\\homework\\\\src\\\\containers\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Nav from \"../components/Nav.jsx\";\nimport Cards from \"../components/Cards.jsx\";\nimport { Route } from \"react-router-dom\";\nimport About from \"../components/About.jsx\";\nimport Ciudad from \"../components/Ciudad\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = \"4ae2636d8dfbdc3044bede63951a019b\";\n\nfunction App() {\n  _s();\n\n  const [cities, setCities] = useState([]);\n\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id !== id));\n  }\n\n  function onSearch(ciudad) {\n    //Llamado a la API del clima\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`).then(r => r.json()).then(recurso => {\n      if (recurso.main !== undefined) {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n\n        if (cities.name === ciudad.name) {\n          alert(\"owo\");\n        } else {\n          setCities(oldCities => [...oldCities, ciudad]);\n          console.log(cities);\n          console.log(ciudad);\n        }\n      } else {\n        alert(\"Ciudad no encontrada\");\n      }\n    });\n  }\n\n  function onFilter(ciudadId) {\n    let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\n\n    if (ciudad.length > 0) {\n      return ciudad[0];\n    } else {\n      return null;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      render: () => /*#__PURE__*/_jsxDEV(Nav, {\n        onSearch: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/\",\n      render: () => /*#__PURE__*/_jsxDEV(Cards, {\n        cities: cities,\n        onClose: onClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/About\",\n      render: () => /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 50\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/Ciudad/:cityId\",\n      render: _ref => {\n        let {\n          match\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(Ciudad, {\n          city: onFilter(match.params.cityId)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 32\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"f1nPJs+hrTaAy6BEqAnKgJLvJt4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/ttige/Desktop/weatherapp2/homework/src/containers/App.js"],"names":["React","useState","Nav","Cards","Route","About","Ciudad","apiKey","App","cities","setCities","onClose","id","oldCities","filter","c","onSearch","ciudad","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","alert","console","log","onFilter","ciudadId","parseInt","length","match","params","cityId"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport Nav from \"../components/Nav.jsx\";\nimport Cards from \"../components/Cards.jsx\";\nimport { Route } from \"react-router-dom\";\nimport About from \"../components/About.jsx\";\n\nimport Ciudad from \"../components/Ciudad\";\n\nconst apiKey = \"4ae2636d8dfbdc3044bede63951a019b\";\n\nfunction App() {\n  const [cities, setCities] = useState([]);\n\n  function onClose(id) {\n    setCities((oldCities) => oldCities.filter((c) => c.id !== id));\n  }\n\n  function onSearch(ciudad) {\n    //Llamado a la API del clima\n   \n    fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`\n    )\n      .then((r) => r.json())\n      .then((recurso) => {\n         \n        if (recurso.main !== undefined) {\n          const ciudad = {\n            min: Math.round(recurso.main.temp_min),\n            max: Math.round(recurso.main.temp_max),\n            img: recurso.weather[0].icon,\n            id: recurso.id,\n            wind: recurso.wind.speed,\n            temp: recurso.main.temp,\n            name: recurso.name,\n            weather: recurso.weather[0].main,\n            clouds: recurso.clouds.all,\n            latitud: recurso.coord.lat,\n            longitud: recurso.coord.lon,\n          };\n          if(cities.name === ciudad.name){\n            alert(\"owo\")\n          } else {\n          setCities((oldCities) => [...oldCities, ciudad]);\n          console.log(cities)\n          console.log(ciudad)\n          }\n        } else {\n          alert(\"Ciudad no encontrada\");\n        }\n      });\n  }\n\n\n  function onFilter(ciudadId) {\n    let ciudad = cities.filter((c) => c.id === parseInt(ciudadId));\n    if (ciudad.length > 0) {\n      return ciudad[0];\n    } else {\n      return null;\n    }\n  }\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" render={() => <Nav onSearch={onSearch} />} />\n      <Route\n        exact\n        path=\"/\"\n        render={() => <Cards cities={cities} onClose={onClose} />}\n      />\n\n      <Route exact path={\"/About\"} render={() => <About />} />\n\n      <Route\n        path={\"/Ciudad/:cityId\"}\n        render={({ match }) => <Ciudad city={onFilter(match.params.cityId)} />}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}