{"ast":null,"code":"var _jsxFileName = \"D:\\\\FT-M2\\\\09-React-Routing\\\\homework\\\\src\\\\containers\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Nav from '../components/Nav.jsx';\nimport Cards from '../components/Cards.jsx';\nimport { Route } from 'react-router-dom';\nimport About from '../components/About.jsx';\nimport Ciudad from '../components/Ciudad';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = '4ae2636d8dfbdc3044bede63951a019b';\n\nfunction App() {\n  _s();\n\n  const [cities, setCities] = useState([]);\n\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id !== id));\n  }\n\n  function onSearch(ciudad) {\n    //Llamado a la API del clima\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`).then(r => r.json()).then(recurso => {\n      if (recurso.main !== undefined) {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n        setCities(oldCities => [...oldCities, ciudad]);\n      } else {\n        alert(\"Ciudad no encontrada\");\n      }\n    });\n  }\n\n  function onFilter(ciudadId) {\n    let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\n\n    if (ciudad.length > 0) {\n      return ciudad[0];\n    } else {\n      return null;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      render: () => /*#__PURE__*/_jsxDEV(Nav, {\n        onSearch: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/\",\n      render: () => /*#__PURE__*/_jsxDEV(Cards, {\n        cities: cities,\n        onClose: onClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/About\",\n      render: () => /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 31\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: '/Ciudad/:cityId',\n      render: _ref => {\n        let {\n          match\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(Ciudad, {\n          city: onFilter(match.params.cityId)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 40\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 14\n  }, this);\n}\n\n_s(App, \"f1nPJs+hrTaAy6BEqAnKgJLvJt4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/FT-M2/09-React-Routing/homework/src/containers/App.js"],"names":["React","useState","Nav","Cards","Route","About","Ciudad","apiKey","App","cities","setCities","onClose","id","oldCities","filter","c","onSearch","ciudad","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","alert","onFilter","ciudadId","parseInt","length","match","params","cityId"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport './App.css';\nimport Nav from '../components/Nav.jsx';\nimport Cards from '../components/Cards.jsx';\nimport { Route } from 'react-router-dom';\nimport About from '../components/About.jsx'\n\nimport Ciudad from '../components/Ciudad'\n\nconst apiKey = '4ae2636d8dfbdc3044bede63951a019b';\n\nfunction App() {\n    const [cities, setCities] = useState([]);\n\n    function onClose(id) {\n        setCities(oldCities => oldCities.filter(c => c.id !== id));\n    }\n\n    function onSearch(ciudad) {\n        //Llamado a la API del clima\n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`)\n            .then(r => r.json())\n            .then((recurso) => {\n                if (recurso.main !== undefined) {\n                    const ciudad = {\n                        min: Math.round(recurso.main.temp_min),\n                        max: Math.round(recurso.main.temp_max),\n                        img: recurso.weather[0].icon,\n                        id: recurso.id,\n                        wind: recurso.wind.speed,\n                        temp: recurso.main.temp,\n                        name: recurso.name,\n                        weather: recurso.weather[0].main,\n                        clouds: recurso.clouds.all,\n                        latitud: recurso.coord.lat,\n                        longitud: recurso.coord.lon\n                    };\n                    setCities(oldCities => [...oldCities, ciudad]);\n                } else {\n                    alert(\"Ciudad no encontrada\");\n                }\n            });\n    }\n\n\n\n\n\n    function onFilter(ciudadId) {\n        let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\n        if (ciudad.length > 0) {\n            return ciudad[0];\n        } else {\n            return null;\n        }\n    }\n    return ( <\n            div className = \"App\" >\n\n\n\n\n            <\n            Route path = '/'\n            render = {\n                () => < Nav onSearch = { onSearch }\n                />} / >\n                <\n                Route exact path = '/'\n                render = {\n                    () => < Cards cities = { cities }\n                    onClose = { onClose }\n                    />} / >\n\n\n                    <\n                    Route exact path = { \"/About\" }\n                    render = {\n                        () => < About / >\n                    }\n                    />\n\n                    <\n                    Route path = { '/Ciudad/:cityId' }\n                    render = {\n                        ({ match }) => < Ciudad city = { onFilter(match.params.cityId) }\n                        />} / >\n\n\n\n                        <\n                        /div> \n\n                    );\n                }\n\n                export default App;"]},"metadata":{},"sourceType":"module"}