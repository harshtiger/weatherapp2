{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ttige\\\\Desktop\\\\weatherapp2\\\\homework\\\\src\\\\containers\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Route, Switch, NavLink, BrowserRouter as Router } from 'react-router-dom';\nimport './App.css';\nimport Nav from \"../components/Nav.jsx\";\nimport Cards from \"../components/Cards.jsx\";\nimport About from \"../components/About.jsx\";\nimport Swal from 'sweetalert2';\nimport Ciudad from \"../components/Ciudad\";\nimport Footer from '../components/Foooter';\nimport E404 from '../components/E404';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = \"4ae2636d8dfbdc3044bede63951a019b\";\n\nfunction App() {\n  _s();\n\n  const [cities, setCities] = useState([]);\n  const date = new Date();\n  var hour = date.getHours();\n  useEffect(() => {\n    if (hour > 7 && hour < 19) {\n      document.body.classList.add('fondodia');\n    } else document.body.classList.add('fondonoche');\n  });\n\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id !== id));\n  }\n\n  function onSearch(ciudad) {\n    //Llamado a la API del clima\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`).then(r => r.json()).then(recurso => {\n      if (recurso.main !== undefined) {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          country: recurso.sys.country,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n\n        for (var item of cities) {\n          if (ciudad.id === item.id) {\n            return Swal.fire(`${ciudad.name} city is already loaded`);\n          }\n        } // Se agrega en ciudades\n\n\n        setCities(oldCities => [...oldCities, ciudad]); // Si no se obtiene:\n      } else {\n        Swal.fire(\"City not found\");\n      }\n    });\n  } // OnFilter: parseInt pq seguro viene un string. Busca en un array la city que coincida con ese id. Toma como parámetro un elemento del array (la \"c\") y dentro de la función agarra el id de cada uno de esos elementos para filtrar\n\n\n  function onFilter(ciudadId) {\n    debugger;\n    let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\n\n    if (ciudad.length > 0) {\n      return ciudad[0];\n    } else {\n      return null;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      render: () => /*#__PURE__*/_jsxDEV(Nav, {\n        onSearch: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/about\",\n          exact: true,\n          component: About\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/ciudad/:ciudadId\",\n          exact: true,\n          render: _ref => {\n            let {\n              match\n            } = _ref;\n            return /*#__PURE__*/_jsxDEV(Ciudad, {\n              city: onFilter(match.params.ciudadId)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 32\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          exact: true,\n          render: () => /*#__PURE__*/_jsxDEV(Cards, {\n            cities: cities,\n            onClose: onClose\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          component: E404\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        render: () => /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"DiWQVw0ar2n3PLd56i1Tx+k2gPg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/ttige/Desktop/weatherapp2/homework/src/containers/App.js"],"names":["React","useState","useEffect","Route","Switch","NavLink","BrowserRouter","Router","Nav","Cards","About","Swal","Ciudad","Footer","E404","apiKey","App","cities","setCities","date","Date","hour","getHours","document","body","classList","add","onClose","id","oldCities","filter","c","onSearch","ciudad","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","wind","speed","temp","name","country","sys","clouds","all","latitud","coord","lat","longitud","lon","item","fire","onFilter","ciudadId","parseInt","length","match","params"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Route, Switch, NavLink, BrowserRouter as Router } from 'react-router-dom';\nimport './App.css';\nimport Nav from \"../components/Nav.jsx\";\nimport Cards from \"../components/Cards.jsx\";\nimport About from \"../components/About.jsx\";\nimport Swal from 'sweetalert2';\nimport Ciudad from \"../components/Ciudad\";\nimport Footer from '../components/Foooter';\nimport E404 from '../components/E404';\n\n\nconst apiKey = \"4ae2636d8dfbdc3044bede63951a019b\";\n\nfunction App() {\n  const [cities, setCities] = useState([]);\n\n\n  const date = new Date();\n  var hour = date.getHours();\n  \n  useEffect(() => {\n    if (hour > 7 && hour < 19) {\n    document.body.classList.add('fondodia');\n    } else\n    document.body.classList.add('fondonoche');\n  });\n\n\n\n  function onClose(id) {\n    setCities((oldCities) => oldCities.filter((c) => c.id !== id));\n  }\n\n  function onSearch(ciudad) {\n    //Llamado a la API del clima\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`)\n      .then(r => r.json())\n      .then((recurso) => {\n        if(recurso.main !== undefined){\n          const ciudad = {\n            min: Math.round(recurso.main.temp_min),\n            max: Math.round(recurso.main.temp_max),\n            img: recurso.weather[0].icon,\n            id: recurso.id,\n            wind: recurso.wind.speed,\n            temp: recurso.main.temp,\n            name: recurso.name,\n            country: recurso.sys.country,\n            weather: recurso.weather[0].main,\n            clouds: recurso.clouds.all,\n            latitud: recurso.coord.lat,\n            longitud: recurso.coord.lon\n          };\n          for (var item of cities) {\n            if (ciudad.id === item.id) {\n              return Swal.fire(`${ciudad.name} city is already loaded`)\n            }\n          }\n          // Se agrega en ciudades\n          setCities(oldCities => [...oldCities, ciudad]);\n          // Si no se obtiene:\n        } else {\n          Swal.fire(\"City not found\");\n        }\n      });\n  }\n  // OnFilter: parseInt pq seguro viene un string. Busca en un array la city que coincida con ese id. Toma como parámetro un elemento del array (la \"c\") y dentro de la función agarra el id de cada uno de esos elementos para filtrar\n  function onFilter(ciudadId) {\n    debugger\n    let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\n    if(ciudad.length > 0) {\n        return ciudad[0];\n    } else {\n        return null;\n    }\n  }\n\n  return (\n        <div className=\"App\"\n        >\n      {/* route captura la URL en la que uno está y muestra un componente o no como queremos que nav esté siempre, va SIN exact*/}\n      <Route\n        path=\"/\" \n        render={() => <Nav onSearch={onSearch}/>}\n      />\n      <div>\n      <Switch>\n      <Route\n        path='/about' exact\n        component={About}\n        />\n        {/* params siempre es un string, de la URL */}\n        <Route\n          exact path='/ciudad/:ciudadId' exact\n          render={({match}) => <Ciudad city={onFilter(match.params.ciudadId)}/>}\n        />\n        {/* Las cards deben aparecer solo en \"/\" */}\n        <Route\n          path=\"/\" exact\n          render={() => \n          <Cards\n            cities={cities}\n            onClose={onClose}\n          />}\n        />\n        <Route component={E404} />\n      </Switch>\n      \n        <Route\n        path=\"/\" \n        render={() => <Footer/>}\n      />\n      </div>\n      \n\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}